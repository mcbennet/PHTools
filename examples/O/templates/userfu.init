/* **************************************************************************** */
/*                                 user functions                               */
/* **************************************************************************** */
#include "o8para.h"
#include <time.h>
#include <stdlib.h>

main() {
    void donlp2(void);
    
    donlp2();
    
    exit(0);
}

/* **************************************************************************** */
/*                              donlp2-intv size initialization                           */
/* **************************************************************************** */
void user_init_size(void) {
    #define  X extern
    #include "o8comm.h"
    #include "o8fint.h"
    #include "o8cons.h"
    #undef   X


    /* problem dimension n = dim(x), nlin=number of linear constraints
       nonlin = number of nonlinear constraints  */
    
    n      =  -1000;
    nlin   =  0;
    nonlin =  0;
    iterma = 1000;
    nstep = 20;
}

/* **************************************************************************** */
/*                              donlp2-intv standard setup                           */
/* **************************************************************************** */
void user_init(void) {
    #define  X extern
    #include "o8comm.h"
    #include "o8fint.h"
    #include "o8cons.h"
    #undef   X


    static INTEGER  i,j;
    static DOUBLE   xst0[-1000] = {0.,/* not used : index 0 */
                               PARAMVALUES};
    static DOUBLE ugloc[-1000] = {0.0,/* not used : index 0 */
                               MINVALUES};
    static DOUBLE ogloc[-1000] = {0.,/* not used : index 0 */
                               MAXVALUES};


    /* name is ident of the example/user and can be set at users will       */
    /* the first static character must be alphabetic. 40 characters maximum */
    /* xst violates bounds : checks for automatic correction */
    strcpy(name,"statmatc");

    /* x is initial guess and also holds the current solution */

    silent = FALSE;
    analyt = FALSE;
    epsdif = 1.e-4;   /* gradients exact to machine precision */
    /* if you want numerical differentiation being done by donlp2 then:*/
    epsfcn   = 1.e-5; /* function values exact to machine precision */
    taubnd   = 0.001;
    /* bounds may be violated at most by taubnd in finite differencing */
    /*  bloc    = TRUE; */
    /* if one wants to evaluate all functions  in an independent process */
    difftype = 2; 
    
    nreset = n;
    
    srand(time(NULL));

    del0 = 0.2e0;
    tau0 = 0.1e0;
    tau  = 0.1e0;
    for (i = 1 ; i <= n ; i++) {

        x[i] = xst0[i];
    }
 
    /*  set lower and upper bounds */
    big = 1.e20;
    for ( i = 1 ; i <= n ; i++ ) { low[i]=ugloc[i]; up[i]=ogloc[i];}

    return;
}

/* **************************************************************************** */
/*                                 special setup                                */
/* **************************************************************************** */
void setup(void) {
    #define  X extern
    #include "o8comm.h"
    #undef   X
    te0=TRUE;
    te2=TRUE;
    te3=TRUE;
    epsx = 1.e-4;
    return;
}

/* **************************************************************************** */
/*  the user may add additional computations using the computed solution here   */
/* **************************************************************************** */
void solchk(void) {
    #define  X extern
    #include "o8comm.h"
    #undef   X
    #include "o8cons.h"

    return;
}

/* **************************************************************************** */
/*                               objective function                             */
/* **************************************************************************** */
void ef(DOUBLE x[],DOUBLE *fx) {
    #define  X extern
    #include "o8fuco.h"
    #include <stdio.h>
    #include <stdlib.h>
    #undef   X

    static int i,c,so; 
    static double objval;
    static double spec_mad,spec_soq;
    double num;

    FILE *fp;
    FILE *fq;  
 
    fp = fopen("params.in", "w");
    if (fp == NULL) 
    {
      printf("I couldn't open params.in for writing.\n");
      exit(0);
    }

    for (i=1; i<=n; ++i)
    {
      fprintf(fp, "%.14f x%u \n", (x[i]), i);
    }

    fclose(fp);
    so = system("python3 RUNYOON_EXE -w \"WEIGHTS\" -r \"RCUTS\" -t TRANSFORM -d REFDIR");

    fq = fopen("results.out", "r");

    objval=0.0;
    c=0;
    while ( fscanf(fq, "%lf", &num ) == 1 )  
    {
       objval+=(num);
       c=c+1;
    } 
    fclose(fq);

    spec_mad = spec_mad/(double)c;
    
    printf("  OBJ Val: %f\n", objval);
    *fx = objval;

    return;
}

/* **************************************************************************** */
/*                          gradient of objective function                      */
/* **************************************************************************** */
void egradf(DOUBLE x[],DOUBLE gradf[]) {
    #define  X extern
    #include "o8fuco.h"
    #undef   X


    return;
}

/* **************************************************************************** */
/*  one nonlinear constraint */
/* **************************************************************************** */
void econ(INTEGER type ,INTEGER liste[], DOUBLE x[],DOUBLE con[], 
              LOGICAL err[]) {
    #define  X extern
    #include "o8fuco.h"
    #undef   X

    static INTEGER i,j;
    static INTEGER liste_loc[3];
    /* the six nonlinear constraints are evaluated and stored in con[1],..,con[6] */
    /* if type != 1 only a selection is evaluated the indices being taken from */
    /* liste. since we have no evaluation errors here err is never touched */
    if ( type == 1 )
    {
       liste_loc[0] = 2 ;
       for ( i = 1 ; i<=2 ; i++ ) { liste_loc[i] = i ; }
    }
    else
    {
       liste_loc[0] = liste[0] ;
       for ( i = 1 ; i<=liste[0] ; i++ ) { liste_loc[i] = liste[i];}
    }

    for ( j = 1 ; j <= liste_loc[0] ; j++ )
    {
       i = liste_loc[j] ;
       switch (i) {
       case 1:
          con[1] = x[3]*x[4]+x[5]*x[6]; 
          continue;
       case 2:
          con[2] = x[3]*x[4]+x[7]*x[8]; 
       continue;
       }
    }

    return;
}

/* **************************************************************************** */
/* **************************************************************************** */
void econgrad(INTEGER liste[] ,INTEGER shift ,  DOUBLE x[],
               DOUBLE **grad) {
    #define  X extern
    #include "o8fuco.h"
    #undef   X

    printf("There shouldn't be an analytic gradient call.\n");

    return;
}


/* **************************************************************************** */
/*                        user functions (if bloc == TRUE)                      */
/* **************************************************************************** */
void eval_extern(INTEGER mode) {
    #define  X extern
    #include "o8comm.h"
    #include "o8fint.h"
    #undef   X
    #include "o8cons.h"

    return;
}

