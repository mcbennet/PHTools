#! /usr/bin/env python3

import numpy as np
import sys, getopt
    
clabels=['S','P','D','F','G']

def ppchannel(r,coeff,alpha,powers):
    val = 0
    for ci,c in enumerate(coeff):
        val = val+c*r**(powers[ci]-2)*np.exp(-alpha[ci]*r*r)
    #end for
    return val
#end def

def printchans(pots):
    print('\nPrinting pseudopotential...')
    lloc = clabels[len(pots)-1]
    for i in range(len(pots)):
        if i==len(pots)-1:
            print(lloc)
        else:
            print(str(clabels[i])+'-'+str(lloc))
        #end if
        for i,p in enumerate(pots[i]):
            print("{:3d} {:12f} {:12f}".format(int(p[0]),p[1],p[2]))
        #end for
    #end for
#end def

if len(sys.argv)<2:
    print('plot_yoon_psuedo -i <inputppfile>')
    sys.exit(2)
#end if 

inputlabels=None
try:
    opts, args = getopt.getopt(sys.argv[1:],"hi:l:",["ifile=","labels="])
except getopt.GetoptError:
   print('plot_yoon_psuedo -i <inputppfile>')
   sys.exit(2)
for opt, arg in opts:
   if opt == '-h':
      print('plot_yoon_psuedo -i <inputppfile>')
      sys.exit()
   elif opt in ("-i", "--ifile"):
      inputfiles = arg.split()
   elif opt in ("-l", "--labels"):
      inputlabels = arg.split()
#end try

if inputlabels is None:
    inputlabels=[]
    for i in range(len(inputfiles)):
        inputlabels.append(str(i))


import matplotlib.pyplot as plt
plt.figure()
colors=['r','g','b','purple','orange']
linestyles=['-','-.','--',':']

for fi,inputfile in enumerate(inputfiles):

    orbs = []
    orb = []
    read = True
    garbage_count = 0
    norm = 0
    x0 = None
    y0 = None
    with open(inputfile) as f:
        for num, line in enumerate(f, 1):
            if '  20. 0.' in line or not read:
                
                garbage_count+=1
                if garbage_count==1:
                    read=False
                    #orbs = np.array(orbs)
                    #orbs.shape = len(orbs)//2,2
                    orbs.append(orb)
                    print(np.shape(orb))
                #end if

                if garbage_count==3:
                    read=True
                    orb = []
                    garbage_count=0
                    x0=None
                    y0=None
                    print(norm)
                    norm=0
                #end if

            else:

                x,y = line.split()
                x = float(x)
                y = float(y)
                if x0 is not None and y0 is not None:
                    dx = x-x0
                    norm+=dx*((x0*y0)*(x0*y0)+(x*y)*(x*y))/2.0
                x0 = x
                y0 = y

                # save orb data
                orb.append([x,y])
                #norm+=

    orbs = np.array(orbs,dtype=float)
    for oi,o in enumerate(orbs): 
        #plt.plot(o[0:1600,0],o[0:1600,1],color=colors[fi],linestyle=linestyles[oi])
        plt.plot(o[0:1600,0],o[0:1600,1]*o[0:1600,0],color=colors[oi],linestyle=linestyles[fi])

    #  # Open a file: file
    #  f = open(inputfile,mode='r')
    #   
    #  # read all lines at once
    #  ftext = f.read()
    #  print(ftext) 
    #  
    #  # close the file
    #  f.close()

plt.show()

quit()


















# PP figure
fig1 = plt.figure()
ax1 = fig1.add_subplot(111)

# Boundedness figure
fig2 = plt.figure()
ax2 = fig2.add_subplot(111)

colors=['r','g','b','purple','orange']

for fi,inputfile in enumerate(inputfiles):
    print('\nInput file is: ', inputfile)
    print('\nReading pseudopotential...')
    filepath1=inputfile
    f1=open(filepath1, "r")
    
    d1=np.array(f1.read().split(),dtype=float)
    f1.close()
    
    # HEADER
    d1head=d1[0:2]
    # CHANNEL LENGTHS
    nchan=int(d1head[1])
    d1chan=d1[2:2+nchan]
    # POTENTIALS
    d1pots=[]
    pos=0
    for i in range(len(d1chan)):
        dtmp = d1[2+nchan+int(pos):2+nchan+int(pos+d1chan[i]*3)]
        dtmp.shape=len(dtmp)//3,3
        pos+=d1chan[i]*3
        d1pots.append(dtmp)
    #end for
    
    # Print Pseudo
    printchans(d1pots)
    
    # 100 linearly spaced numbers
    r = np.linspace(0.001,3,3000)
    
    y = []
    for i in range(nchan):
        ytmp = []
        for j in range(len(r)):
            ytmp.append(ppchannel(r[j],d1pots[i][:,2],d1pots[i][:,1],d1pots[i][:,0]))
        #for
        y.append(ytmp)
    #for
    y=np.array(y)
    
    # setting the axes at the centre
    #ax = fig.add_subplot(1, 1, 1)
    
    ax1.plot(r,-d1head[0]/r, 'k-',linewidth=2,label=None)
    # plot the function
    linestyles=['-','--','-.']
    for i in range(nchan):
        if i==len(d1pots)-1:
            label=inputlabels[fi]+' Local'
            ax1.plot(r,y[i]-d1head[0]/r, label=label,color=colors[fi],linestyle=linestyles[i])
        else:
            label=inputlabels[fi]+' Local+'+clabels[i]
            ax1.plot(r,y[nchan-1]+y[i]-d1head[0]/r, label=label, color=colors[fi], linestyle=linestyles[i])
        #end if
    #end for
    
    # Pure Coulomb
    ax1.set_ylim(max(np.min(-d1head[0]/r+y[nchan-1])-5,-700),np.max(y[0]-d1head[0]/r+y[nchan-1])+100)
    #plt.ylim(-50,50)
    ax1.set_xlim(0,2)
    ax1.legend()
    
    ax2.plot(r,[0]*len(r),color='k',label=None)
    ax2.plot(r,r*r*(y[1]-y[0])+[1]*len(r),label=inputlabels[fi]+' L2 Constraint',color=colors[fi])
    ax2.set_xlim(0,2.5)
    ax2.set_ylim(-1.0,1.9)
    ax2.legend(loc='lower right')

#end for
    
# show the plot
plt.show()

